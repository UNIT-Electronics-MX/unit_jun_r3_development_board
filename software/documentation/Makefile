# Makefile para generaci√≥n de hojas de datos
# Usando el script general de back/documentation

.PHONY: all pdf clean help install professional

# Variables
README = README.md
BUILD_DIR = build
BACK_DOC_PATH = ../../../../back/documentation
PYTHON_VENV = ../../../../.venv/bin/python

# Comando por defecto
all: pdf

# Generar PDF usando el script general
pdf:
	@echo "üìÑ Generando hoja de datos con script general..."
	@mkdir -p $(BUILD_DIR)
	@cd $(BACK_DOC_PATH) && $(PYTHON_VENV) generate_pdf.py $(CURDIR)/$(README)
	@if [ -f build/*.pdf ]; then \
		echo "‚úÖ PDF generado en build/"; \
	else \
		echo "‚ùå Error: No se encontr√≥ el PDF generado"; \
	fi

# M√©todo PROFESIONAL (mantener compatibilidad)
professional:
	@echo "üèÜ Generando hoja de datos PROFESIONAL..."
	@mkdir -p $(BUILD_DIR)
	@python generate_professional_pdf.py
	@echo "‚úÖ Listo! Calidad profesional con im√°genes de hardware/resources/"

# Instalar dependencias
install:
	@echo "üì¶ Instalando dependencias..."
	@pip install -r requirements.txt
	@echo "‚úÖ Dependencias instaladas"

# Limpiar archivos generados
clean:
	@echo "üßπ Limpiando archivos generados..."
	@rm -rf $(BUILD_DIR)
	@echo "‚úÖ Limpieza completada"

# Verificar que README.md existe
check:
	@if [ ! -f $(README) ]; then \
		echo "‚ùå Error: $(README) no encontrado"; \
		exit 1; \
	fi
	@echo "‚úÖ $(README) encontrado"

# Mostrar informaci√≥n de ayuda
help:
	@echo "üõ†Ô∏è GENERADOR DE HOJAS DE DATOS"
	@echo "=============================="
	@echo ""
	@echo "Comandos disponibles:"
	@echo "  make pdf             - Genera PDF usando script general (SIN secci√≥n adicional)"
	@echo "  make professional    - Genera hoja PROFESIONAL (CON secci√≥n adicional)"
	@echo "  make install         - Instala dependencias"
	@echo "  make clean           - Limpia archivos generados"
	@echo "  make check           - Verifica que README.md existe"
	@echo "  make help            - Muestra esta ayuda"
	@echo ""
	@echo "‚≠ê RECOMENDADO para evitar 'ADDITIONAL PRODUCT DOCUMENTATION':"
	@echo "  make pdf"
