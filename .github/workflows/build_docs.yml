name: Build Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'software/scripts/**'
      - 'software/README.md'
      - 'hardware/**'
      - 'README.md'
      - '.github/workflows/build_docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'software/scripts/**'
      - 'software/README.md'
      - 'hardware/**'
      - 'README.md'

permissions:
  contents: write

jobs:
  build_and_deploy:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install -r software/documentation/requirements.txt
        echo "Python dependencies installed from requirements.txt"

    - name: Setup mdBook
      uses: peaceiris/actions-mdbook@v2
      with:
        mdbook-version: '0.4.52'

    - name: Install Google Chrome (for PDF generation)
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: Generate documentation
      run: |
        echo "Starting documentation build..."
        cd software/scripts
        python build_docs.py
        echo "Documentation generated successfully"

    - name: Generate Professional PDF Documentation
      run: |
        echo "Generating professional datasheet..."
        cd software/documentation
        echo "Current directory: $(pwd)"
        echo "Directory contents before generation:"
        ls -la
        python3 generate_professional_pdf.py
        echo "Directory contents after generation:"
        ls -la
        echo "Build directory contents:"
        ls -la build/ 2>/dev/null || echo "Build directory not found"
        echo "Professional documentation generation completed"

    - name: Deploy to docs directory
      run: |
        # Create docs directory if it doesn't exist
        mkdir -p docs
        
        # Copy mdBook documentation
        if [ -d "software/book/book" ]; then
          echo "Copying mdBook documentation..."
          
          # Clear existing docs and copy new content
          rm -rf docs/mdbook
          mkdir -p docs/mdbook
          cp -r software/book/book/* docs/mdbook/
          echo "mdBook documentation copied to docs/mdbook/"
          
          # Create simple index.html redirect to mdbook
          echo '<!DOCTYPE html><html><head><meta http-equiv="refresh" content="0; url=./mdbook/index.html"><title>Documentation</title></head><body><p>Redirecting... <a href="./mdbook/index.html">Click here if not redirected</a></p></body></html>' > docs/index.html
          echo "Index redirect created"
        else
          echo "ERROR: No mdBook build found at software/book/book"
          exit 1
        fi
        
        # Copy Professional Documentation
        echo "Checking for professional documentation..."
        if [ -f "software/documentation/build/datasheet_professional.html" ]; then
          echo "Found professional datasheet HTML, copying..."
          cp software/documentation/build/datasheet_professional.html docs/
          if [ -f "software/documentation/build/datasheet_professional.pdf" ]; then
            cp software/documentation/build/datasheet_professional.pdf docs/
            echo "Professional datasheet HTML and PDF copied to docs/"
          else
            echo "WARNING: PDF not found at software/documentation/build/datasheet_professional.pdf"
          fi
        else
          echo "ERROR: Professional datasheet HTML not found at software/documentation/build/datasheet_professional.html"
          echo "Contents of software/documentation/build/:"
          ls -la software/documentation/build/ 2>/dev/null || echo "Build directory does not exist"
        fi
        
        # Copy images and resources from documentation build
        if [ -d "software/documentation/build" ]; then
          echo "Copying images and resources from documentation build..."
          find software/documentation/build -type f \( -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.pdf" \) -print -exec cp {} docs/ \;
          echo "Documentation build resources copied"
        fi
        
        # Copy hardware resources directly
        if [ -d "hardware/resources" ]; then
          echo "Copying hardware resources..."
          find hardware/resources -type f \( -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.pdf" \) -print -exec cp {} docs/ \;
          echo "Hardware resources copied"
        fi
        
        echo "Final contents of docs directory:"
        ls -la docs/
        echo ""
        echo "PDF and image files in docs:"
        find docs/ -type f \( -name "*.pdf" -o -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" \) -ls
        
        # GitHub Pages setup
        touch docs/.nojekyll

    - name: Deploy to repository
      run: |
        git config --local user.name "github-actions[bot]"
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        
        git add docs/
        if ! git diff --staged --quiet; then
          git commit -m "Deploy documentation [skip ci]"
          git push origin main
        else
          echo "No changes to commit"
        fi
