name: Deploy Documentation to GitHub Pages

on:
  push:
    branches: [ main ]
    paths:
      - 'software/**'
      - 'hardware/**'
      - 'README.md'
      - 'LICENSE'
      - '.github/workflows/deploy-mdbook.yml'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force complete rebuild'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Setup mdBook
      uses: peaceiris/actions-mdbook@v2
      with:
        mdbook-version: '0.4.52'

    - name: Build documentation with navbar injection
      run: |
        echo "Building documentation with custom navbar..."
        python3 software/scripts/build_docs.py
        echo "Documentation build completed!"

    - name: Inject navbar into HTML files
      run: |
        echo "Injecting clean navbar links into HTML files..."
        for html_file in software/book/book/*.html software/book/book/*/*.html software/book/book/*/*/*.html; do
          if [ -f "$html_file" ]; then
            # Insert minimal navbar links before closing body tag
            sed -i '/<\/body>/i\
        <script>\
        document.addEventListener("DOMContentLoaded", function() {\
            setTimeout(function() {\
                const menuBar = document.querySelector(".menu-bar .right-buttons");\
                if (menuBar) {\
                    const shopLink = document.createElement("a");\
                    shopLink.href = "https://uelectronics.com/";\
                    shopLink.target = "_blank";\
                    shopLink.innerHTML = "ðŸ›’";\
                    shopLink.title = "Shop";\
                    shopLink.style.cssText = "color: #666; text-decoration: none; padding: 4px; font-size: 14px; margin-right: 4px; border: 1px solid #ddd; border-radius: 3px; transition: all 0.2s ease; display: inline-block; text-align: center; width: 24px; height: 24px; line-height: 16px;";\
                    shopLink.onmouseover = function() { this.style.borderColor = "#999"; this.style.backgroundColor = "#f5f5f5"; };\
                    shopLink.onmouseout = function() { this.style.borderColor = "#ddd"; this.style.backgroundColor = "transparent"; };\
                    \
                    const repoLink = document.createElement("a");\
                    repoLink.href = "https://github.com/UNIT-Electronics-MX/unit_jun_r3_development_board";\
                    repoLink.target = "_blank";\
                    repoLink.innerHTML = "ðŸ“‹";\
                    repoLink.title = "Repository";\
                    repoLink.style.cssText = "color: #666; text-decoration: none; padding: 4px; font-size: 14px; margin-right: 4px; border: 1px solid #ddd; border-radius: 3px; transition: all 0.2s ease; display: inline-block; text-align: center; width: 24px; height: 24px; line-height: 16px;";\
                    repoLink.onmouseover = function() { this.style.borderColor = "#999"; this.style.backgroundColor = "#f5f5f5"; };\
                    repoLink.onmouseout = function() { this.style.borderColor = "#ddd"; this.style.backgroundColor = "transparent"; };\
                    \
                    menuBar.insertBefore(repoLink, menuBar.firstChild);\
                    menuBar.insertBefore(shopLink, menuBar.firstChild);\
                }\
            }, 100);\
        });\
        </script>' "$html_file"
          fi
        done
        echo "Navbar injection completed!"

    - name: Verify build output
      run: |
        echo "Verifying documentation build..."
        ls -la software/book/book/
        if [ ! -f "software/book/book/index.html" ]; then
          echo "ERROR: index.html not found!"
          exit 1
        fi
        echo "Build verification passed!"

    - name: Copy built documentation to docs/ directory
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Copying built documentation to docs/ for GitHub Pages..."
        # Remove existing docs content (except original PDFs if any)
        mkdir -p docs
        find docs -name "*.html" -delete
        find docs -name "*.css" -delete  
        find docs -name "*.js" -delete
        find docs -type d -name "FontAwesome" -exec rm -rf {} + 2>/dev/null || true
        find docs -type d -name "fonts" -exec rm -rf {} + 2>/dev/null || true
        
        # Copy new built content
        cp -r software/book/book/* docs/
        
        # Verify copy
        ls -la docs/
        echo "Documentation copied to docs/ directory!"

    - name: Commit and push updated docs
      if: github.ref == 'refs/heads/main'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit in docs/"
        else
          git commit -m " Auto-update documentation in docs/

          - Built from latest README content
          - Generated: $(date)
          - Commit: ${{ github.sha }}
          - Updated by GitHub Actions workflow"
          
          git push origin main
          echo "Documentation changes committed and pushed!"
        fi

    - name: Setup Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v5

    - name: Upload documentation to Pages  
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      id: deployment
      uses: actions/deploy-pages@v4
